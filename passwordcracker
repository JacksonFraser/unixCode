#!/bin/bash
# Compares hashes, deletes found passwords so they can't be matched again
# terminates when they are no passwords left...
function pwChecker {
    guess="$password"
    try=$(echo -n "$guess" | sha256sum | awk '{print $1}')
    for ((i=0; i<$numPw; i++));
    do

        if [ "$try" == "${hashes[$i]}" ]
        then
            echo "${names[$i]} $guess" | tee -a extractedData.txt

            unset hashes[$i]
        if [ "${#hashes[@]}" == 0 ]
        then
            echo "All $numPw passwords were successfully found"
            exit 0
        fi
        fi
    done
}

count=0
numPw=0

#Extracts the name and hashes from the given file
for word in $(<test)
do
    
    hashes[numPw]=$(echo $word | cut -f2 -d":")
    names[numPw]=$(echo "${word%%:*}")
    numPw=$[numPw+1]
done

echo "Starting common password file search...."
# Inserts every word in the given file into password checker function
for password in $(<1,000passwords)
do
    pwChecker
done
echo "Completed common passwords file search, ${#hashes[@]} password(s) remaining"

echo "Starting dictionary attack...."
for password in $(<~e20925/linux.words)
do
    pwChecker
done

echo "Starting bruteforce attack...."
num=26
chars="abcdefghijklmnopqrstuvwxyz"
#I've changed these values to save time, and to guarantee all passwords are found
for ((t=0; t<$num; t++));
do
    password="${chars:$t:1}"
    for ((j=0; j<$num; j++));
    do
        password="${chars:$t:1}${chars:$j:1}"
        for((k=0; k<$num; k++));
        do
            password="${chars:$t:1}${chars:$j:1}${chars:$k:1}"
            pwChecker
            for((l=0; l<$num; l++));
            do
                password="${chars:$t:1}${chars:$j:1}${chars:$k:1}${chars:$l:1}"
                pwChecker
                for((m=0; m<$num; m++));
                do
                    password="${chars:$t:1}${chars:$j:1}${chars:$k:1}${chars:$l:1}${chars:$m:1}"
                    pwChecker
                done
            done
        done
    done
done

